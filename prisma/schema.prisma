generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int                  @id @default(autoincrement())
  name                String
  email               String               @unique
  password            String
  avatar              String?
  status              UserStatus           @default(PENDING)
  messages            Message[]
  rooms               UserRoom[]
  confirmCodes        ConfirmCode[]
  resetPasswordTokens ResetPasswordToken[]
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  @@map("users")
}

model ConfirmCode {
  id        Int               @id @default(autoincrement())
  code      String
  userId    Int
  status    ConfirmCodeStatus @default(PENDING)
  user      User              @relation(fields: [userId], references: [id])
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  @@map("confirm_code")
}

model ResetPasswordToken {
  id        Int                      @id @default(autoincrement())
  token     String
  userId    Int
  status    ResetPasswordTokenStatus @default(PENDING)
  user      User                     @relation(fields: [userId], references: [id])
  createdAt DateTime                 @default(now())
  updatedAt DateTime                 @updatedAt
  @@map("reset_password_token")
}

model UserRoom {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  roomId    Int
  room      Room     @relation(fields: [roomId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("users_rooms")
}

model Room {
  id        Int        @id @default(autoincrement())
  name      String
  code      String     @unique
  users     UserRoom[]
  messages  Message[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  @@map("rooms")
}

model Message {
  id        Int      @id @default(autoincrement())
  content   String
  roomId    Int
  room      Room     @relation(fields: [roomId], references: [id])
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("messages")
}

enum ConfirmCodeStatus {
  PENDING
  USED
  EXPIRED
  @@map("confirm_code_status")
}

enum ResetPasswordTokenStatus {
  PENDING
  USED
  EXPIRED
  @@map("reset_password_token_status")
}

enum UserStatus {
  PENDING
  ACTIVE
  @@map("user_status")
}